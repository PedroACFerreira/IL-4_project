<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.8.5"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:io="clr-namespace:Bonsai.IO;assembly=Bonsai.System"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:dsp="clr-namespace:Bonsai.Dsp;assembly=Bonsai.Dsp"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns:drw="clr-namespace:Bonsai.Vision.Drawing;assembly=Bonsai.Vision"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="io:GetFiles">
          <io:Path>C:\Users\pedro\Desktop\Jess\OFT 01_07\Analysing</io:Path>
          <io:SearchPattern>*.avi</io:SearchPattern>
          <io:SearchOption>AllDirectories</io:SearchOption>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Concat" />
      </Expression>
      <Expression xsi:type="rx:SelectMany">
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:RepeatCount">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="rx:CreateObservable">
        <Workflow>
          <Nodes>
            <Expression xsi:type="SubscribeSubject">
              <Name>FileName</Name>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="FileName" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:FileCapture">
                <cv:FileName>C:\Users\pedro\Desktop\Jess\OFT 01_07\Analysing\Trial 5.avi</cv:FileName>
                <cv:PlaybackRate>409600</cv:PlaybackRate>
                <cv:StartPosition>0</cv:StartPosition>
                <cv:PositionUnits>Frames</cv:PositionUnits>
                <cv:Loop>false</cv:Loop>
                <cv:Playing>true</cv:Playing>
              </Combinator>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="Combinator">
                <Combinator xsi:type="cv:Crop">
                  <cv:RegionOfInterest>
                    <cv:X>457</cv:X>
                    <cv:Y>127</cv:Y>
                    <cv:Width>832</cv:Width>
                    <cv:Height>795</cv:Height>
                  </cv:RegionOfInterest>
                </Combinator>
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="Combinator">
                <Combinator xsi:type="cv:HsvThreshold">
                  <cv:Lower>
                    <cv:Val0>0</cv:Val0>
                    <cv:Val1>5</cv:Val1>
                    <cv:Val2>5</cv:Val2>
                    <cv:Val3>0</cv:Val3>
                  </cv:Lower>
                  <cv:Upper>
                    <cv:Val0>45</cv:Val0>
                    <cv:Val1>45</cv:Val1>
                    <cv:Val2>45</cv:Val2>
                    <cv:Val3>0</cv:Val3>
                  </cv:Upper>
                </Combinator>
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="Combinator">
                <Combinator xsi:type="cv:Smooth">
                  <cv:SmoothType>Median</cv:SmoothType>
                  <cv:Size1>13</cv:Size1>
                  <cv:Size2>13</cv:Size2>
                  <cv:Sigma1>0</cv:Sigma1>
                  <cv:Sigma2>0</cv:Sigma2>
                </Combinator>
              </Builder>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:ColorBalance">
                <cv:Scale>
                  <cv:Val0>3.01</cv:Val0>
                  <cv:Val1>0.78</cv:Val1>
                  <cv:Val2>1.72</cv:Val2>
                  <cv:Val3>1.26</cv:Val3>
                </cv:Scale>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Grayscale" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:BackgroundSubtraction">
                <cv:BackgroundFrames>75</cv:BackgroundFrames>
                <cv:AdaptationRate>0</cv:AdaptationRate>
                <cv:ThresholdValue>36</cv:ThresholdValue>
                <cv:ThresholdType>Binary</cv:ThresholdType>
                <cv:SubtractionMethod>Dark</cv:SubtractionMethod>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Smooth">
                <cv:SmoothType>Median</cv:SmoothType>
                <cv:Size1>11</cv:Size1>
                <cv:Size2>17</cv:Size2>
                <cv:Sigma1>0</cv:Sigma1>
                <cv:Sigma2>0</cv:Sigma2>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Skip">
                <rx:Count>300</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Take">
                <rx:Count>9000</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="GroupWorkflow">
              <Name>Heatmaps</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="GroupWorkflow">
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="WorkflowInput">
                          <Name>Source1</Name>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:Normalize" />
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="dsp:Accumulate" />
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="dsp:Extrema" />
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>MaxValue</Selector>
                        </Expression>
                        <Expression xsi:type="PropertyMapping">
                          <PropertyMappings>
                            <Property Name="Max" />
                          </PropertyMappings>
                        </Expression>
                        <Expression xsi:type="Divide">
                          <Operand xsi:type="DoubleProperty">
                            <Value>5</Value>
                          </Operand>
                        </Expression>
                        <Expression xsi:type="PropertyMapping">
                          <PropertyMappings>
                            <Property Name="RangeMax" />
                          </PropertyMappings>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="dsp:Rescale">
                            <dsp:Min>0</dsp:Min>
                            <dsp:Max>1065</dsp:Max>
                            <dsp:RangeMin>10</dsp:RangeMin>
                            <dsp:RangeMax>213</dsp:RangeMax>
                            <dsp:RescaleType>Clamp</dsp:RescaleType>
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="dsp:ConvertScale">
                            <dsp:Depth>U8</dsp:Depth>
                            <dsp:Scale>1</dsp:Scale>
                            <dsp:Shift>0</dsp:Shift>
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:Grayscale" />
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:ConvertColor">
                            <cv:Conversion>Gray2Bgr</cv:Conversion>
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:ColorBalance">
                            <cv:Scale>
                              <cv:Val0>1</cv:Val0>
                              <cv:Val1>0.8</cv:Val1>
                              <cv:Val2>1.8</cv:Val2>
                              <cv:Val3>0</cv:Val3>
                            </cv:Scale>
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                      </Nodes>
                      <Edges>
                        <Edge From="0" To="1" Label="Source1" />
                        <Edge From="1" To="2" Label="Source1" />
                        <Edge From="2" To="3" Label="Source1" />
                        <Edge From="2" To="8" Label="Source1" />
                        <Edge From="3" To="4" Label="Source1" />
                        <Edge From="4" To="5" Label="Source1" />
                        <Edge From="4" To="6" Label="Source1" />
                        <Edge From="5" To="8" Label="Source2" />
                        <Edge From="6" To="7" Label="Source1" />
                        <Edge From="7" To="8" Label="Source3" />
                        <Edge From="8" To="9" Label="Source1" />
                        <Edge From="9" To="10" Label="Source1" />
                        <Edge From="10" To="11" Label="Source1" />
                        <Edge From="11" To="12" Label="Source1" />
                        <Edge From="12" To="13" Label="Source1" />
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:TakeLast">
                      <rx:Count>1</rx:Count>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>FileName</Name>
                  </Expression>
                  <Expression xsi:type="ipy:PythonTransform">
                    <ipy:Name>NameToCSV</ipy:Name>
                    <ipy:Script>@returns(str)
def process(value):
  
  a = value.split('\\')
  b = a[-1].split('.')
  c = b[0]
  d = ""
  for i in a[:-2]:
    d = d + i + '\\'
  e = d + c + "_Heatmap_5min" + '.png'

  return e</ipy:Script>
                  </Expression>
                  <Expression xsi:type="PropertyMapping">
                    <PropertyMappings>
                      <Property Name="FileName" />
                    </PropertyMappings>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="cv:SaveImage">
                      <cv:FileName>C:\Users\pedro\Desktop\Jess\OFT 01_07\Trial 5_Heatmap_5min.png</cv:FileName>
                      <cv:Suffix>None</cv:Suffix>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="cv:ConvertColor">
                      <cv:Conversion>Luv2LRgb</cv:Conversion>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:TakeLast">
                      <rx:Count>1</rx:Count>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>FileName</Name>
                  </Expression>
                  <Expression xsi:type="ipy:PythonTransform">
                    <ipy:Name>NameToCSV</ipy:Name>
                    <ipy:Script>@returns(str)
def process(value):
  
  a = value.split('\\')
  b = a[-1].split('.')
  c = b[0]
  d = ""
  for i in a[:-2]:
    d = d + i + '\\'
  e = d + c + "_Heatmap_5min_colored" + '.png'

  return e</ipy:Script>
                  </Expression>
                  <Expression xsi:type="PropertyMapping">
                    <PropertyMappings>
                      <Property Name="FileName" />
                    </PropertyMappings>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="cv:SaveImage">
                      <cv:FileName>C:\Users\pedro\Desktop\Jess\OFT 01_07\Trial 5_Heatmap_5min_colored.png</cv:FileName>
                      <cv:Suffix>None</cv:Suffix>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                  <Edge From="1" To="7" Label="Source1" />
                  <Edge From="2" To="6" Label="Source1" />
                  <Edge From="3" To="4" Label="Source1" />
                  <Edge From="4" To="5" Label="Source1" />
                  <Edge From="5" To="6" Label="Source2" />
                  <Edge From="7" To="8" Label="Source1" />
                  <Edge From="7" To="13" Label="Source1" />
                  <Edge From="8" To="12" Label="Source1" />
                  <Edge From="9" To="10" Label="Source1" />
                  <Edge From="10" To="11" Label="Source1" />
                  <Edge From="11" To="12" Label="Source2" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Skip">
                <rx:Count>1000</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:FindContours">
                <cv:Mode>External</cv:Mode>
                <cv:Method>ChainApproxSimple</cv:Method>
                <cv:Offset>
                  <cv:X>0</cv:X>
                  <cv:Y>0</cv:Y>
                </cv:Offset>
                <cv:MinArea xsi:nil="true" />
                <cv:MaxArea xsi:nil="true" />
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:BinaryRegionAnalysis" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:LargestBinaryRegion" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Centroid</Selector>
            </Expression>
            <Expression xsi:type="GroupWorkflow">
              <Name>Trace</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source2</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Take">
                      <rx:Count>1</rx:Count>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Size</Selector>
                  </Expression>
                  <Expression xsi:type="PropertyMapping">
                    <PropertyMappings>
                      <Property Name="Size" />
                    </PropertyMappings>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="drw:CreateCanvas">
                      <drw:Size>
                        <drw:Width>204</drw:Width>
                        <drw:Height>208</drw:Height>
                      </drw:Size>
                      <drw:Depth>U8</drw:Depth>
                      <drw:Channels>3</drw:Channels>
                      <drw:Color>
                        <drw:Val0>0</drw:Val0>
                        <drw:Val1>0</drw:Val1>
                        <drw:Val2>0</drw:Val2>
                        <drw:Val3>0</drw:Val3>
                      </drw:Color>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:BufferCount">
                      <rx:Count>50</rx:Count>
                      <rx:Skip>1</rx:Skip>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="dsp:ConvertToArray">
                    <dsp:Depth xsi:nil="true" />
                  </Expression>
                  <Expression xsi:type="PropertyMapping">
                    <PropertyMappings>
                      <Property Name="Points" />
                    </PropertyMappings>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="drw:Path">
                      <drw:Color>
                        <drw:Val0>255</drw:Val0>
                        <drw:Val1>255</drw:Val1>
                        <drw:Val2>255</drw:Val2>
                        <drw:Val3>255</drw:Val3>
                      </drw:Color>
                      <drw:Thickness>2</drw:Thickness>
                      <drw:LineType>Connected8</drw:LineType>
                      <drw:Shift>0</drw:Shift>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="drw:DrawCanvas" />
                  </Expression>
                  <Expression xsi:type="rx:Accumulate" />
                  <Expression xsi:type="WorkflowOutput" />
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:TakeLast">
                      <rx:Count>1</rx:Count>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>FileName</Name>
                  </Expression>
                  <Expression xsi:type="ipy:PythonTransform">
                    <ipy:Name>NameToCSV</ipy:Name>
                    <ipy:Script>@returns(str)
def process(value):
  
  a = value.split('\\')
  b = a[-1].split('.')
  c = b[0]
  d = ""
  for i in a[:-2]:
    d = d + i + '\\'
  e = d + c + "_Trace" + '.png'

  return e</ipy:Script>
                  </Expression>
                  <Expression xsi:type="PropertyMapping">
                    <PropertyMappings>
                      <Property Name="FileName" />
                    </PropertyMappings>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="cv:SaveImage">
                      <cv:FileName>C:\Users\pedro\Desktop\Jess\OFT 01_07\Trial 5_Trace.png</cv:FileName>
                      <cv:Suffix>None</cv:Suffix>
                    </Combinator>
                  </Expression>
                </Nodes>
                <Edges>
                  <Edge From="0" To="5" Label="Source1" />
                  <Edge From="0" To="6" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                  <Edge From="2" To="3" Label="Source1" />
                  <Edge From="3" To="4" Label="Source1" />
                  <Edge From="4" To="5" Label="Source2" />
                  <Edge From="5" To="9" Label="Source1" />
                  <Edge From="6" To="7" Label="Source1" />
                  <Edge From="7" To="8" Label="Source1" />
                  <Edge From="8" To="9" Label="Source2" />
                  <Edge From="9" To="10" Label="Source1" />
                  <Edge From="10" To="11" Label="Source1" />
                  <Edge From="11" To="12" Label="Source1" />
                  <Edge From="11" To="13" Label="Source1" />
                  <Edge From="13" To="17" Label="Source1" />
                  <Edge From="14" To="15" Label="Source1" />
                  <Edge From="15" To="16" Label="Source1" />
                  <Edge From="16" To="17" Label="Source2" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Timestamp" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Timestamp</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Take">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:CombineLatest" />
            </Expression>
            <Expression xsi:type="Subtract" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Skip">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>Euclidean Distance</ipy:Name>
              <ipy:Script>import math # Importing the necessary packages for this script

@returns(float) # Here you indicate which type of data will be flowing out from this node

def process(value): # This is the actual script that will be running

  # Setup the variables with the values coming from previous nodes
  CurrentFrame = value.Item1
  PreviousFrame = value.Item2

  # Calculating the distance moved by the center of the animal between two frames
  PixelDistance = math.sqrt(((CurrentFrame.X-PreviousFrame.X)**2)+((CurrentFrame.Y-PreviousFrame.Y)**2))

  # Defining the values will be pushed out of the node
  return float(PixelDistance)</ipy:Script>
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>Settings</ipy:Name>
              <ipy:Script>from System import Tuple

#############################################
#    Here's the values to be set manually   #
################################################################################

VideoFR = 30.0      # Video frame rate (Frames per second)
TBinsEnable = 1   # Do you want time bins? (1/0)
Min = 10         # Minutes per time bin
Ratio = 0.256     # Conversion ratio pixel to centimeter
Error1 = 3/Ratio       # Maximum number of pixels to move in one frame
Error5 = 12/Ratio      # Maximum number pixels to move in five frames
Threshold = 0.12/Ratio     # Minimum number of pixels to move on average in five frames
NumTBins = 6      # Total number of time bins pretended

################################################################################

TBins = [TBinsEnable,NumTBins]
counter = -1
################################################################################

@returns(Tuple[float,list,float,float,float,float,float])
def process(value):

  global VideoFR
  global Min
  global Ratio
  global Error1
  global Error5
  global Threshold
  global TBins
  global counter
  
  Time = value.Item3.TotalMilliseconds

  if Time == 0:
  
    counter += 1

  return Tuple.Create(VideoFR,TBins,float(Min),float(Ratio),float(Error1),float(Error5),float(Threshold))</ipy:Script>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="GroupWorkflow">
                <Name>ROI</Name>
                <Workflow>
                  <Nodes>
                    <Expression xsi:type="WorkflowInput">
                      <Name>Source1</Name>
                    </Expression>
                    <Expression xsi:type="Combinator">
                      <Combinator xsi:type="cv:RoiActivity">
                        <cv:Regions>
                          <cv:ArrayOfPoint>
                            <cv:Point>
                              <cv:X>65</cv:X>
                              <cv:Y>69</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>164</cv:X>
                              <cv:Y>68</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>167</cv:X>
                              <cv:Y>161</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>64</cv:X>
                              <cv:Y>158</cv:Y>
                            </cv:Point>
                          </cv:ArrayOfPoint>
                          <cv:ArrayOfPoint>
                            <cv:Point>
                              <cv:X>11</cv:X>
                              <cv:Y>14</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>85</cv:X>
                              <cv:Y>14</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>85</cv:X>
                              <cv:Y>77</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>11</cv:X>
                              <cv:Y>85</cv:Y>
                            </cv:Point>
                          </cv:ArrayOfPoint>
                          <cv:ArrayOfPoint>
                            <cv:Point>
                              <cv:X>146</cv:X>
                              <cv:Y>16</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>223</cv:X>
                              <cv:Y>16</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>223</cv:X>
                              <cv:Y>90</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>146</cv:X>
                              <cv:Y>90</cv:Y>
                            </cv:Point>
                          </cv:ArrayOfPoint>
                          <cv:ArrayOfPoint>
                            <cv:Point>
                              <cv:X>3</cv:X>
                              <cv:Y>128</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>82</cv:X>
                              <cv:Y>130</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>88</cv:X>
                              <cv:Y>219</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>3</cv:X>
                              <cv:Y>219</cv:Y>
                            </cv:Point>
                          </cv:ArrayOfPoint>
                          <cv:ArrayOfPoint>
                            <cv:Point>
                              <cv:X>220</cv:X>
                              <cv:Y>223</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>145</cv:X>
                              <cv:Y>210</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>150</cv:X>
                              <cv:Y>145</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>220</cv:X>
                              <cv:Y>135</cv:Y>
                            </cv:Point>
                          </cv:ArrayOfPoint>
                          <cv:ArrayOfPoint>
                            <cv:Point>
                              <cv:X>86</cv:X>
                              <cv:Y>12</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>148</cv:X>
                              <cv:Y>12</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>144</cv:X>
                              <cv:Y>68</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>83</cv:X>
                              <cv:Y>70</cv:Y>
                            </cv:Point>
                          </cv:ArrayOfPoint>
                          <cv:ArrayOfPoint>
                            <cv:Point>
                              <cv:X>7</cv:X>
                              <cv:Y>81</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>79</cv:X>
                              <cv:Y>76</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>72</cv:X>
                              <cv:Y>138</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>7</cv:X>
                              <cv:Y>129</cv:Y>
                            </cv:Point>
                          </cv:ArrayOfPoint>
                          <cv:ArrayOfPoint>
                            <cv:Point>
                              <cv:X>223</cv:X>
                              <cv:Y>70</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>159</cv:X>
                              <cv:Y>80</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>163</cv:X>
                              <cv:Y>156</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>222</cv:X>
                              <cv:Y>152</cv:Y>
                            </cv:Point>
                          </cv:ArrayOfPoint>
                          <cv:ArrayOfPoint>
                            <cv:Point>
                              <cv:X>159</cv:X>
                              <cv:Y>219</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>87</cv:X>
                              <cv:Y>218</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>90</cv:X>
                              <cv:Y>153</cv:Y>
                            </cv:Point>
                            <cv:Point>
                              <cv:X>160</cv:X>
                              <cv:Y>156</cv:Y>
                            </cv:Point>
                          </cv:ArrayOfPoint>
                        </cv:Regions>
                        <cv:Operation>Sum</cv:Operation>
                      </Combinator>
                    </Expression>
                    <Expression xsi:type="GroupWorkflow">
                      <Name>Index</Name>
                      <Workflow>
                        <Nodes>
                          <Expression xsi:type="WorkflowInput">
                            <Name>Source1</Name>
                          </Expression>
                          <Expression xsi:type="Index">
                            <Operand xsi:type="IntProperty">
                              <Value>0</Value>
                            </Operand>
                          </Expression>
                          <Expression xsi:type="Index">
                            <Operand xsi:type="IntProperty">
                              <Value>1</Value>
                            </Operand>
                          </Expression>
                          <Expression xsi:type="Index">
                            <Operand xsi:type="IntProperty">
                              <Value>2</Value>
                            </Operand>
                          </Expression>
                          <Expression xsi:type="Index">
                            <Operand xsi:type="IntProperty">
                              <Value>3</Value>
                            </Operand>
                          </Expression>
                          <Expression xsi:type="Index">
                            <Operand xsi:type="IntProperty">
                              <Value>4</Value>
                            </Operand>
                          </Expression>
                          <Expression xsi:type="Index">
                            <Operand xsi:type="IntProperty">
                              <Value>5</Value>
                            </Operand>
                          </Expression>
                          <Expression xsi:type="Index">
                            <Operand xsi:type="IntProperty">
                              <Value>6</Value>
                            </Operand>
                          </Expression>
                          <Expression xsi:type="Index">
                            <Operand xsi:type="IntProperty">
                              <Value>7</Value>
                            </Operand>
                          </Expression>
                          <Expression xsi:type="Index">
                            <Operand xsi:type="IntProperty">
                              <Value>8</Value>
                            </Operand>
                          </Expression>
                          <Expression xsi:type="Combinator">
                            <Combinator xsi:type="rx:Zip" />
                          </Expression>
                          <Expression xsi:type="WorkflowOutput" />
                        </Nodes>
                        <Edges>
                          <Edge From="0" To="1" Label="Source1" />
                          <Edge From="0" To="2" Label="Source1" />
                          <Edge From="0" To="3" Label="Source1" />
                          <Edge From="0" To="4" Label="Source1" />
                          <Edge From="0" To="5" Label="Source1" />
                          <Edge From="0" To="6" Label="Source1" />
                          <Edge From="0" To="7" Label="Source1" />
                          <Edge From="0" To="8" Label="Source1" />
                          <Edge From="0" To="9" Label="Source1" />
                          <Edge From="1" To="10" Label="Source1" />
                          <Edge From="2" To="10" Label="Source2" />
                          <Edge From="3" To="10" Label="Source3" />
                          <Edge From="4" To="10" Label="Source4" />
                          <Edge From="5" To="10" Label="Source5" />
                          <Edge From="6" To="10" Label="Source6" />
                          <Edge From="7" To="10" Label="Source7" />
                          <Edge From="8" To="10" Label="Source8" />
                          <Edge From="9" To="10" Label="Source9" />
                          <Edge From="10" To="11" Label="Source1" />
                        </Edges>
                      </Workflow>
                    </Expression>
                    <Expression xsi:type="WorkflowOutput" />
                  </Nodes>
                  <Edges>
                    <Edge From="0" To="1" Label="Source1" />
                    <Edge From="1" To="2" Label="Source1" />
                    <Edge From="2" To="3" Label="Source1" />
                  </Edges>
                </Workflow>
              </Builder>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>Distance Travelled</ipy:Name>
              <ipy:Script>from System import Tuple

# This node calculates distance travelled by the animal taking into account a threshold for actual movement 
# calculated every 5 frames, in order to exclude grooming and similar noise from movement calculations

################

# Global variables

MTDistance = 0
TBinsMDistance = 0
PrevTBMDis = 0
Accumulated = 0
Frame = 0
Counter = 0

################

@returns(Tuple[float,float,float])
def process(value):
  
  global MTDistance, TBinsMDistance, PrevTBMDis, Counter, Accumulated, Frame

  VideoFR = value.Item3.Item1
  TBins = value.Item3.Item2[0]
  Min = value.Item3.Item3
  Ratio = value.Item3.Item4
  Error = value.Item3.Item6
  Threshold = value.Item3.Item7

  Time = value.Item1.TotalMilliseconds
  Current = value.Item2
  Frame += 1
  Counter += 1
  TBinFR = round(Min * 60 * VideoFR)

# Error handling for NaN values

  if not Current &gt; -1:
    Current = 0
  if Current &gt; Error:
    Current = 0

# Accumulate distance travelled every five frames

  Accumulated += Current

# Adds up euclidean distance if animal is moving

  if Counter == 5:
    Counter = 0
    if Accumulated/5 &gt; Threshold:
      MTDistance = MTDistance + Accumulated
      Accumulated = 0
    else:
      Accumulated = 0

# Time bin calculation

  if TBins == 1:
    if Frame == TBinFR:
      Frame = 0
      TBinsMDistance = MTDistance - PrevTBMDis
      PrevTBMDis = MTDistance

# Check to see if new video has begun, reset all values

  if Time == 0:
    MTDistance = 0
    TBinsMDistance = 0
    PrevTBMDis = 0
    Accumulated = 0
    Frame = 0
    Counter = 0

# Result

  return Tuple.Create(MTDistance*Ratio, TBinsMDistance*Ratio, VideoFR)</ipy:Script>
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>Average Instant Speed</ipy:Name>
              <ipy:Script>from System import Tuple

# This node calculates average instant speed using a movement threshold

################

TDistance = 0
TBinsDistance = 0
PrevTBDis = 0
MSpeed = 0
TBMSpeed = 0
Accumulated = 0
Frame = 0
Counter = 0
MSpeedCounter = 0
TBMSpeedCounter = 0
Time = 0
TotalCounter = 0
TBTotalCounter = 0
Bins = 0

################

@returns(Tuple[float,float])
def process(value):
  
  global  TDistance, TBinsDistance, PrevTBDis, MSpeed, TBMSpeed, MSpeedCounter, Accumulated, Frame, Counter, Time, TotalCounter, MSpeedAcc, TBMSpeedAcc, TBTotalCounter, Bins

  VideoFR = value.Item3.Item1
  TBins = value.Item3.Item2[0]
  Min = value.Item3.Item3
  Ratio = value.Item3.Item4
  NumTBins = value.Item3.Item2[1]
  Error = value.Item3.Item6
  Threshold = value.Item3.Item7

  Time = value.Item1.TotalMilliseconds
  Current = value.Item2
  Accumulated += Current
  Frame += 1
  Counter += 1
  TBinFR = round(Min * 60 * VideoFR)

# Error handling

  if not Current &gt; -1:
    Current = 0
  if Current &gt; Error:
    Current = 0

# Check to see if new video has begun, reset all values

  if Time == 0:
    TDistance = 0
    TBinsDistance = 0
    MSpeed = 0
    TBMSpeed = 0
    PrevTBDis = 0
    Accumulated = 0
    Frame = 0
    Counter = 0
    MSpeedCounter = 0
    TotalCounter = 0
    MSpeedAcc = 0
    TBMSpeedAcc = 0
    TBTotalCounter = 0
    Bins = 0

# Adds up euclidean distance each frame and calculate speed

  if Counter == 5:
    Counter = 0
    if Accumulated/5 &gt; Threshold:
      TDistance += Accumulated
      MSpeedCounter += 5
      Accumulated = 0
    else:
      Accumulated = 0
      if MSpeedCounter &gt; 0:
        MSpeedAcc += (TDistance*Ratio)*30/MSpeedCounter
        TBMSpeedAcc += (TDistance*Ratio)*30/MSpeedCounter
        MSpeedCounter = 0
        TDistance = 0
        TotalCounter += 1
        TBTotalCounter += 1

    if TotalCounter &gt; 0:
      MSpeed = MSpeedAcc / TotalCounter
    
# Time bins calculation

  if TBins == 1:
    if Frame == TBinFR:
      if TBTotalCounter &gt; 0:
        TBMSpeed = TBMSpeedAcc / TBTotalCounter
        TBMSpeedAcc = 0
        TBTotalCounter = 0
        Frame = 0
        Bins += 1
      else:
        TBMSpeed = 0
    if Bins == NumTBins-1:
      if TBTotalCounter &gt; 0:
        TBMSpeed = TBMSpeedAcc / TBTotalCounter

# Results

  return Tuple.Create(float(MSpeed), float(TBMSpeed))</ipy:Script>
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>Time Spent Still</ipy:Name>
              <ipy:Script>from System import Tuple

# This node calculates the total time the animal is not moving according to a threshold
# calculated every 5 frames. Grooming and othwer behaviors inducing small position changes
# are not considered as movement for this calculation.

################

Movement = 0
TBinsMovement = 0
PrevTBMovement = 0
Accumulated = 0
Frame = 0
Counter = 0

################

@returns(Tuple[float,float])
def process(value):
  
  global Movement, TBinsMovement, PrevTBMovement, Counter, Accumulated, Frame

  VideoFR = value.Item3.Item1
  TBins = value.Item3.Item2[0]
  Min = value.Item3.Item3
  Ratio = value.Item3.Item4
  Error = value.Item3.Item6
  Threshold = value.Item3.Item7

  Time = value.Item1.TotalMilliseconds
  Current = value.Item2
  Accumulated += Current
  Frame += 1
  Counter += 1
  TBinFR = round(Min * 60 * VideoFR)

# Error handling for NaN values

  if not Current &gt; -1:
    Current = 0
  if Current &gt; Error:
    Current = 0

# Accumulate distance travelled every five frames

  Accumulated += Current

# Check to see if new video has begun, reset all values

  if Time == 0:
    Movement = 0
    TBinsMovement = 0
    PrevTBMovement = 0
    Accumulated = 0
    Frame = 0
    Counter = 0

# Adds up frames if animal is not moving

  if Counter == 5:
    Counter = 0
    if Accumulated/5 &lt;= Threshold:
      Movement += 5
      Accumulated = 0
    else:
      Accumulated = 0

# Time bin calculation

  if TBins == 1:
    if Frame == TBinFR:
      Frame = 0
      TBinsMovement = Movement - PrevTBMovement
      PrevTBMovement = Movement

# Result

  return Tuple.Create(float(Movement/VideoFR)/60, float(TBinsMovement/VideoFR)/60)</ipy:Script>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>FileName</Name>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="Value" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>C:\Users\pedro\Desktop\Jess\OFT 01_07\Analysing\Trial 5.avi</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>NameToCSV</ipy:Name>
              <ipy:Script>a = []
b = []
c = ""

@returns(str)
def process(value):
  
  global a
  global b 
  global c

  a = value.split('\\')
  b = a[-1].split('.')
  VideoName = b[0]

  return VideoName</ipy:Script>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="ipy:PythonTransform">
                <ipy:Name>Time in ROI</ipy:Name>
                <ipy:Script>from System import Tuple

# This node calculates the total time the animal spends in different regions of interest

################

TimeSpent = []
TSBPrev = []
TSBFinal = []
Bins = []
Frame = 0
FrameCounter = 0

c = 0
MaxIndex = 0
counter = 0

################

@returns(Tuple[list,list])
def process(value):

  global TimeSpent
  global TimeSpentBins
  global c
  global MaxIndex
  global counter
  global TSBPrev
  global Frame, FrameCounter
  global Bins, BinsNow
  

  VideoFR = value.Item3.Item1
  TBins = value.Item3.Item2[0]
  Min = value.Item3.Item3
  Ratio = value.Item3.Item4
  NumTBins = value.Item3.Item2[1]
  Time = value.Item1.TotalMilliseconds
  Frame += 1
  TBinFR = round(Min * 60 * VideoFR)

  Center = value.Item4[0].Activity.Val0
  TopLeft = value.Item4[1].Activity.Val0
  TopRight = value.Item4[2].Activity.Val0
  BottomLeft = value.Item4[3].Activity.Val0
  BottomRight = value.Item4[4].Activity.Val0
  CheckTop = value.Item4[5].Activity.Val0
  CheckLeft = value.Item4[6].Activity.Val0
  CheckRight = value.Item4[7].Activity.Val0
  CheckBottom = value.Item4[8].Activity.Val0
  
  Positions = [Center,TopLeft,TopRight,BottomLeft,BottomRight,CheckTop,CheckLeft,CheckRight,CheckBottom]

  for i in Positions:
    c = c + i

  if c &gt; 1:
    MaxIndex = Positions.index(max(Positions))

# Check to see if new video has begun, reset all values

  if Time == 0:
    Frame = 0
    c = 0
    MaxIndex = 0
    counter = 0
    TimeSpent = []
    TimeSpentBins = []
    TSBPrev = []
    TSBFinal = []
    counter = 0
    FrameCounter = 0
    BinsNow = []

# Adds up time spent in each place each frame

  if Time == 0:
    TimeSpent = []
    TSBPrev = []
    Bins = []
    for i in range(5):
      TimeSpent.append(float(0))
      TSBPrev.append(float(0))
      Bins.append(float(0))
      BinsNow.append(float(0))

    

  if c &gt; 1:
    if MaxIndex &lt; 5:
      TimeSpent[MaxIndex] += 1
      c = 0
    
# Time bin calculation
  
  if TBins == True:
    if Frame == TBinFR:
      Frame = 0
      BinsNow = []
      for i in range(5):
        BinsNow.append(TimeSpent[i])
      for i in range(5):
        Bins[i] = BinsNow[i] - TSBPrev[i]
      TSBPrev = BinsNow
      FrameCounter += 1
    elif FrameCounter &gt;= NumTBins:
      for i in range(5):
        Bins[i] = (TimeSpent[i] - TSBPrev[i])/30
      
# Results

  return Tuple.Create(TimeSpent, Bins)</ipy:Script>
              </Builder>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>Data Processing</ipy:Name>
              <ipy:Script>from System import Tuple

##################

Frame = 0

##################

@returns(list)
def process(value):

  global VideoName
  global Frame

  VideoName = value.Item4
  Time = value.Item5.TotalMilliseconds
  
  if Time == 0:
    Frame = 0
  
  Frame += 1

  MDistance = str(value.Item1.Item1/100) + ";"
  MSpeed = str(value.Item2.Item1) + ";"
  Mobility = str(value.Item3.Item1)
  TBMSPeed = str(value.Item2.Item2)

  DataCSV = VideoName + ";" + ";" + ";" + "Total;" + MDistance + MSpeed + Mobility
  
  return [DataCSV, Frame, TBMSPeed]
</ipy:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:TakeLast">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>Data Processing</ipy:Name>
              <ipy:Script>from System import Tuple

@returns(Tuple[str,str,str,str])
def process(value):

  VideoName = value.Item4

  TBMDistance = str(value.Item1.Item2/100) + ";"
  TBMSpeed = str(value.Item2.Item2) + ";"
  TBMobility = str(value.Item3.Item2)

  return Tuple.Create(VideoName,TBMDistance,TBMSpeed,TBMobility)</ipy:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>Time bins</ipy:Name>
              <ipy:Script>from System import Tuple

# &gt;&gt;&gt; GLOBAL VARIABLES &lt;&lt;&lt;

VideoFR = 0   # Video frame rate
TBins = 0     # Do you want time bins? (True/False)
Min = 0       # Minutes per time bin

################

Counter = 0
TBinFR = Min * 60 * VideoFR

################

@returns(bool)
def process(value):

  global Counter
  global VideoFR
  global TBins
  global Min
  global TBinFR

  VideoFR = value.Item2.Item1
  TBins = value.Item2.Item2[0]
  Min = value.Item2.Item3
  
  Time = value.Item1.TotalMilliseconds

  TBinFR = round(Min * 60 * VideoFR)

  if Time == 0:
    Counter = 0

  Counter += 1

  if Counter == TBinFR+1:
    Counter = 0
    return True
  else:
    return False</ipy:Script>
            </Expression>
            <Expression xsi:type="rx:Condition">
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Gate" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Skip">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>TBData</ipy:Name>
              <ipy:Script>from System import Tuple

DataCSV = ""
List = []
Counter = 0

@returns(list)
def process(value):
  
  global Counter
  global List
  global DataCSV

  VideoName = value.Item1.Item1
  TBMDistance = value.Item1.Item2
  TBMSpeed = value.Item1.Item3
  TBMobility = value.Item1.Item4

  Time = value.Item3.TotalMilliseconds
  
  if Time == 0:
    DataCSV = ""
    List = []
    Counter = 0

  DataCSV = VideoName + ";" + ";" + ";" + TBMDistance + TBMSpeed + TBMobility + "\n"

  List.append(DataCSV)

  return List</ipy:Script>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>FileName</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>WritetoCSV</ipy:Name>
              <ipy:Script>from System import Tuple
import clr
from string import ascii_uppercase
clr.AddReference("Microsoft.Office.Interop.Excel")
#Getting Excel Started
import Microsoft.Office.Interop.Excel as Excel
from System.Type import Missing
import os

Header = 0
TBins = 1
Counter = 0 
Min = 0
TotalValue = 0
MDistance = 0
MSpeed = 0
Mobility = 0
Ratio = 0
row = 1

@returns(bool)
def process(value):

  global Header
  global TBins
  global Counter 
  global VideoFR
  global TotalValue 
  global MDistance  
  global MSpeed 
  global Mobility 
  global Ratio
  global row
  
  Ratio = value.Item3.Item4
  VideoFR = value.Item3.Item1
 
  TBins = value.Item3.Item2[0]
  FinalData = ""
  BinData = ""
  ActualMin = 0
  ActualMin2 = 0
  TimePoint = []
  TimePointz = ""

  FolderPath = value.Item4.split('\\')
  Folder = FolderPath[-2]
  Counter = 0

  Frame = value.Item1[1]
  if (Frame + 300) &gt; 60*VideoFR:
    m , s = divmod(((Frame+300)/VideoFR), 60)
  else:
    m = 0
    s = int(round((Frame+300)/60,0))
  Min = value.Item3.Item3
  VideoFR = value.Item3.Item1
  TBinFR = Min * 60 * VideoFR 
  FinalData = ""
  Final = value.Item1[0]

  if TBins == 1:
    for i in value.Item2:
      Counter += 1
      ActualMin = Min * Counter
      ActualMin2 = Min * (Counter-1)
      splitz = [x + ";" for x in i.split(";")]
      FileName = splitz[0]
      MobList = [(i.split(";")[-1])]
      Minutes1 = str(int(round(ActualMin2-0.5,0))) + "min" + str(int(round(((ActualMin2-int(round(ActualMin2-0.5,0)))*60),0))) + "sec"
      if ActualMin2 == 0:
        Minutes1= "0min"
      Minutes2 = str(int(round(ActualMin-0.5,0))) + "min" + str(int(round(((ActualMin-int(round(ActualMin-0.5,0)))*60),0))) + "sec"
      TimePoint = [str(Minutes1) + " to " + str(Minutes2) + ";"]
      Data = splitz[:3] + TimePoint + splitz[3:-1] + MobList
      for a in Data:
        BinData += a
      FinalData += (Folder + ";" + BinData).replace(",",".")
      BinData = ""
      
      ValueSplit = i.split(";")
      ValueFinal = Final.split(";")

      MDistance += float(ValueSplit[-3])
      MSpeed += float(ValueSplit[-2])
      Mobility += float(ValueSplit[-1])

    if Frame &gt;= ((Counter*TBinFR)+(TBinFR*0.1)): 
      FMDistance = str(float(ValueFinal[-3]) - MDistance) + ";"
      FMSpeed = value.Item1[2] + ";"
      FMobility = str(float(ValueFinal[-1]) - Mobility) + "\n"

      Minutes1 = str(int(round(ActualMin-0.5,0))) + "min" + str(int(round(((ActualMin-int(round(ActualMin-0.5,0)))*60),0))) + "sec"
      TimePointz = Minutes1 + " to End;"
    
      FinalBin = Folder + ";" + FileName + ";" + ";" + TimePointz + FMDistance.replace(',','.') + FMSpeed.replace(',','.') + FMobility.replace(',','.') 
          
      FinalData += (FinalBin)

  Counter = 0
  TotalValue = 0
  Distance = 0
  MDistance = 0
  Speed = 0
  MSpeed = 0
  Mobility = 0

  FinalData += (Folder + ";" + Final)

  d = ""
  for i in value.Item4.split('\\')[:-2]:
    d = d + i + '\\'
  d = d + "Data_OFT.xlsx"

  ToExcel = FinalData.split("\n")

  excel = Excel.ApplicationClass()
  excel.Visible = True # makes the Excel application visible to the use
  excel.DisplayAlerts = False # Overwrite by default
  # creating a new one
  
  if row == 1:
    workbook = excel.Workbooks.Add()

    # adding a worksheet
    worksheet = workbook.Worksheets.Add()
    worksheet.Name = "DataOFT"

    ColumnNames = ["Folder", "FileName", "ID", "Condition", "Time", "Total Distance (m)", "Average Instant Speed (cm/s)", "Time not Moving (min)"]  
    
    for i in range(len(ColumnNames)):
      worksheet.Range[ascii_uppercase[i] + "1"].Value2 = ColumnNames[i]

    a = ""
    b = 1
    for i in value.Item4.split('\\')[:-1]:
      a = a + i + '\\'

    c = os.listdir(a) 
    for i in c:
      if i.endswith(".avi"):
        b+=1

    worksheet.ListObjects.Add(
      SourceType= Excel.XlListObjectSourceType.xlSrcRange,
      Source= worksheet.Range["A1:"+ ascii_uppercase[len(ColumnNames)-1] + str(len(ToExcel)*b)],
      XlListObjectHasHeaders= Excel.XlYesNoGuess.xlYes)

  else:
    ColumnNames = ["Folder", "FileName", "ID", "Condition", "Time", "Total Distance (m)", "Average Instant Speed (cm/s)", "Time not Moving (min)"] 
    
    workbook = excel.Workbooks.Open(d)
    worksheet=workbook.ActiveSheet

  for rowdata in ToExcel:
    row += 1
    rowlist = rowdata.split(";")
    for i in range(len(rowlist)):
      cellname = ascii_uppercase[i] + str(row)
      cell = worksheet.Range[cellname]
      cell.Value2 = rowlist[i]


  


  workbook.SaveAs(d, ConflictResolution=Excel.XlSaveConflictResolution.xlLocalSessionChanges)

  excel.Quit()

  return True</ipy:Script>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Disable">
              <Builder xsi:type="ipy:PythonTransform">
                <ipy:Name>Group Data</ipy:Name>
                <ipy:Script>from System import Tuple

##################

VideoName = ""
Frame = 0

##################

@returns(list)
def process(value):

  global VideoName
  global Frame
  
  VideoFR = value.Item1.Item3
  VideoName = value.Item4
  Time = value.Item5.TotalMilliseconds
  
  if Time == 0:
    Frame = 0
  
  List = value.Item6.Item1
  LastBin = value.Item6.Item2
  Frame += 1
  for i in range(len(LastBin)):
    LastBin[i] = str(LastBin[i])

  DataCSV = VideoName + " ;" + " ;" + " ;" + "Total;" + str(float(List[0])/VideoFR) + ";" + str(float(List[1])/VideoFR) + ";" + str(float(List[2])/VideoFR) + ";" + str(float(List[3])/VideoFR) + ";" + str(float(List[4])/VideoFR)
  
  return [DataCSV, Frame, LastBin]
</ipy:Script>
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="Combinator">
                <Combinator xsi:type="rx:TakeLast">
                  <rx:Count>2</rx:Count>
                </Combinator>
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="ipy:PythonTransform">
                <ipy:Name>Group TB Data</ipy:Name>
                <ipy:Script>from System import Tuple

##################

VideoName = ""

##################

@returns(Tuple[str,list])
def process(value):

  global VideoName
  
  VideoName = value.Item4
  List = value.Item6.Item2

  return Tuple.Create(VideoName,List)</ipy:Script>
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="Combinator">
                <Combinator xsi:type="rx:Gate" />
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="Combinator">
                <Combinator xsi:type="rx:Skip">
                  <rx:Count>1</rx:Count>
                </Combinator>
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="Combinator">
                <Combinator xsi:type="rx:Zip" />
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="ipy:PythonTransform">
                <ipy:Name>Group TB Data (2)</ipy:Name>
                <ipy:Script>from System import Tuple

DataCSV = ""
List = []
Counter = 0
VList = []

@returns(list)
def process(value):
  
  global Counter
  global List
  global DataCSV
  global VList

  VideoFR = value.Item2.Item1
  VideoName = value.Item1.Item1

  Time = value.Item3.TotalMilliseconds
  
  VList = value.Item1.Item2

  if Time == 0:
    DataCSV = ""
    List = []
    Counter = 0

  DataCSV = VideoName + " ;" + " ;" + " ;" + str(float(VList[0])/VideoFR) + ";" + str(float(VList[1])/VideoFR) + ";" + str(float(VList[2])/VideoFR) + ";" + str(float(VList[3])/VideoFR) + ";" + str(float(VList[4])/VideoFR)



  List.append(DataCSV)

  return List</ipy:Script>
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="SubscribeSubject">
                <Name>FileName</Name>
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="Combinator">
                <Combinator xsi:type="rx:Zip" />
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="ipy:PythonTransform">
                <ipy:Name>Data to CSV</ipy:Name>
                <ipy:Script>from System import Tuple

Header = 0
TBins = 1
Counter = 0
Min = 0
VideoFR = 0
TotalValue = 0
Ratio = 0
VCenter = 0
VTopLeft = 0
VTopRight = 0
VBottomRight = 0
VBottomLeft = 0


@returns(str)
def process(value):
    global Header
    global TBins
    global Counter
    global VideoFR
    global TotalValue
    global Ratio


    Ratio = value.Item3.Item4
    VideoFR = value.Item3.Item1

    TBins = value.Item3.Item2[0]
    FinalData = ""
    BinData = ""
    ActualMin = 0
    ActualMin2 = 0
    Timepoint = []
    Timepointz = ""

    Final = value.Item1[0]

    FolderPath = value.Item4.split('\\')
    Folder = FolderPath[-2]
    Counter = 0
    LastBin = value.Item1[2]

    Frame = value.Item1[1]
    if (Frame + 300) &gt; 60 * VideoFR:
        m, s = divmod(((Frame + 300) / VideoFR), 60)
    else:
        m = 0
        s = int(round((Frame + 300) / VideoFR / 60, 0))
    Min = value.Item3.Item3

    TBinFR = Min * 60 * VideoFR

    if Header == 0:
        Header = 1
        FinalData += "Folder;" + "FileName;" + "ID;" + "Condition;" + "Time;" + "Center;" + "TopLeft;" + "TopRight;" + "BottomLeft;" + "BottomRight\n"

    if TBins == 1:

        for i in value.Item2:
            Counter += 1
            splitz = [x + ";" for x in i.split(";")]

            ActualMin = Min * Counter
            ActualMin2 = Min * (Counter - 1)
            FileName = splitz[0]
            Minutes1 = str(int(round(ActualMin2 - 0.5, 0))) + "min" + str(
                int(round(((ActualMin2 - int(round(ActualMin2 - 0.5, 0))) * 60), 0))) + "sec"
            if ActualMin2 == 0:
                Minutes1 = "0min"
            Minutes2 = str(int(round(ActualMin - 0.5, 0))) + "min" + str(
                int(round(((ActualMin - int(round(ActualMin - 0.5, 0))) * 60), 0))) + "sec"
            TimePoint = [str(Minutes1) + " to " + str(Minutes2) + ";"]

            Data = splitz[:3] + TimePoint + splitz[3:]
            for a in Data:
                BinData += a
            FinalData += (Folder + ";" + BinData + "\n")
            BinData = ""

        if Frame &gt;= ((Counter * TBinFR) + (TBinFR * 0.1)):
            Center = LastBin[-5] + ";"
            TopLeft = LastBin[-4] + ";"
            TopRight = LastBin[-3] + ";"
            BottomLeft = LastBin[-2] + ";"
            BottomRight = LastBin[-1] + "\n"

            Minutes1 = str(int(round(ActualMin - 0.5, 0))) + "min" + str(
                int(round(((ActualMin - int(round(ActualMin - 0.5, 0))) * 60), 0))) + "sec"
            TimePointz = Minutes1 + " to End;"

            FinalBin = Folder + ";" + FileName + " ;" + " ;" + TimePointz + Center + TopLeft + TopRight + BottomLeft + BottomRight

            FinalData += (FinalBin)

    Counter = 0

    FinalData += (Folder + ";" + Final)

    return FinalData</ipy:Script>
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="ipy:PythonTransform">
                <ipy:Name>NameToCSV</ipy:Name>
                <ipy:Script>@returns(str)
def process(value):
  
  a = value.split('\\')
  b = a[-1].split('.')
  c = b[0]
  d = ""
  for i in a[:-2]:
    d = d + i + '\\'
  e = d + "Data_OFT_ROI" + '.txt'

  return e</ipy:Script>
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="PropertyMapping">
                <PropertyMappings>
                  <Property Name="FileName" />
                </PropertyMappings>
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="Combinator">
                <Combinator xsi:type="io:TextWriter">
                  <io:FileName>C:\Users\pedro\Desktop\Jess\OFT 01_07\Data_OFT_ROI.txt</io:FileName>
                  <io:Suffix>None</io:Suffix>
                  <io:Buffered>true</io:Buffered>
                  <io:Overwrite>true</io:Overwrite>
                  <io:Append>true</io:Append>
                </Combinator>
              </Builder>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>FileName</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="2" To="18" Label="Source1" />
            <Edge From="2" To="19" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="9" To="13" Label="Source1" />
            <Edge From="10" To="11" Label="Source1" />
            <Edge From="11" To="12" Label="Source1" />
            <Edge From="13" To="14" Label="Source1" />
            <Edge From="13" To="28" Label="Source1" />
            <Edge From="14" To="15" Label="Source1" />
            <Edge From="15" To="16" Label="Source1" />
            <Edge From="16" To="17" Label="Source1" />
            <Edge From="17" To="18" Label="Source2" />
            <Edge From="17" To="24" Label="Source1" />
            <Edge From="17" To="25" Label="Source2" />
            <Edge From="19" To="20" Label="Source1" />
            <Edge From="20" To="21" Label="Source1" />
            <Edge From="20" To="22" Label="Source1" />
            <Edge From="21" To="22" Label="Source2" />
            <Edge From="22" To="23" Label="Source1" />
            <Edge From="23" To="25" Label="Source3" />
            <Edge From="23" To="29" Label="Source1" />
            <Edge From="23" To="38" Label="Source5" />
            <Edge From="23" To="42" Label="Source1" />
            <Edge From="23" To="47" Label="Source3" />
            <Edge From="23" To="58" Label="Source3" />
            <Edge From="24" To="25" Label="Source1" />
            <Edge From="25" To="26" Label="Source1" />
            <Edge From="25" To="27" Label="Source1" />
            <Edge From="25" To="35" Label="Source2" />
            <Edge From="26" To="29" Label="Source2" />
            <Edge From="27" To="29" Label="Source3" />
            <Edge From="27" To="42" Label="Source2" />
            <Edge From="27" To="47" Label="Source2" />
            <Edge From="27" To="50" Label="Source3" />
            <Edge From="27" To="58" Label="Source2" />
            <Edge From="27" To="61" Label="Source3" />
            <Edge From="28" To="29" Label="Source4" />
            <Edge From="29" To="30" Label="Source1" />
            <Edge From="29" To="31" Label="Source1" />
            <Edge From="29" To="32" Label="Source1" />
            <Edge From="29" To="37" Label="Source1" />
            <Edge From="30" To="38" Label="Source1" />
            <Edge From="31" To="38" Label="Source2" />
            <Edge From="32" To="38" Label="Source3" />
            <Edge From="33" To="34" Label="Source1" />
            <Edge From="34" To="35" Label="Source1" />
            <Edge From="35" To="36" Label="Source1" />
            <Edge From="36" To="38" Label="Source4" />
            <Edge From="37" To="38" Label="Source6" />
            <Edge From="38" To="39" Label="Source1" />
            <Edge From="38" To="41" Label="Source1" />
            <Edge From="38" To="53" Label="Source1" />
            <Edge From="38" To="55" Label="Source1" />
            <Edge From="39" To="40" Label="Source1" />
            <Edge From="40" To="50" Label="Source1" />
            <Edge From="41" To="45" Label="Source1" />
            <Edge From="42" To="43" Label="Source1" />
            <Edge From="43" To="44" Label="Source1" />
            <Edge From="44" To="45" Label="Source2" />
            <Edge From="44" To="56" Label="Source2" />
            <Edge From="45" To="46" Label="Source1" />
            <Edge From="46" To="47" Label="Source1" />
            <Edge From="47" To="48" Label="Source1" />
            <Edge From="48" To="50" Label="Source2" />
            <Edge From="49" To="50" Label="Source4" />
            <Edge From="50" To="51" Label="Source1" />
            <Edge From="50" To="52" Label="Source1" />
            <Edge From="53" To="54" Label="Source1" />
            <Edge From="54" To="61" Label="Source1" />
            <Edge From="55" To="56" Label="Source1" />
            <Edge From="56" To="57" Label="Source1" />
            <Edge From="57" To="58" Label="Source1" />
            <Edge From="58" To="59" Label="Source1" />
            <Edge From="59" To="61" Label="Source2" />
            <Edge From="60" To="61" Label="Source4" />
            <Edge From="60" To="63" Label="Source1" />
            <Edge From="61" To="62" Label="Source1" />
            <Edge From="62" To="65" Label="Source1" />
            <Edge From="63" To="64" Label="Source1" />
            <Edge From="64" To="65" Label="Source2" />
            <Edge From="66" To="67" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Concat" />
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="1" To="2" Label="Source1" />
      <Edge From="2" To="3" Label="Source1" />
      <Edge From="3" To="4" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>